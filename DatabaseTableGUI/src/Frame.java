import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Enumeration;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;


public class Frame extends JFrame {

    TableModel tableModel;
    Service service;

    Integer page = 1;
    Integer rowCountPerPage = 5;
    Integer totalPage = 1;
    Integer totalData = 0;
    long id=0;

    boolean refresh=false;
    boolean orderById=false;
    boolean orderByFName=false;
    boolean orderByLName=false;
    boolean orderByDepartment=false;

    public Frame() {

        initComponents();

        setLocationRelativeTo(null);


        jComboBoxPage.addItem("5");
        jComboBoxPage.addItem("15");
        jComboBoxPage.addItem("30");
        jComboBoxPage.addItem("50");
        jComboBoxPage.addItem("100");
        jComboBoxPage.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent e) {
                initPagination();
            }
        });
        initPagination();
    }

    private void initPagination() {
        if(!refresh)
            totalData = (App.getService().count());
        else
            totalData = App.getService().countOne(id);
        rowCountPerPage = Integer.valueOf(Objects.requireNonNull(jComboBoxPage.getSelectedItem()).toString());
        double totalPageD = Math.ceil(totalData.doubleValue() / rowCountPerPage.doubleValue());
        totalPage = (int) totalPageD;


        if (page.equals(1)) {
            jButtonFirst.setEnabled(false);
            jButtonPrevious.setEnabled(false);
        } else {
            jButtonFirst.setEnabled(true);
            jButtonPrevious.setEnabled(true);
        }

        if (page.equals(totalPage)) {
            jButtonLast.setEnabled(false);
            jButtonNext.setEnabled(false);
        } else {
            jButtonLast.setEnabled(true);
            jButtonNext.setEnabled(true);
        }

        if (page > totalPage) {
            page = 1;
        }

        tableModel = new TableModel();

        if(!orderByFName && !orderById && !orderByLName && !orderByDepartment){
            if(!refresh)
                {
                    tableModel.setList(App.getService().findAll(page, rowCountPerPage));}
           else{
                tableModel.setList(App.getService().find(id));
           }
        }
        else{
            if(orderById) {
                tableModel.setList(App.getService().OrderByID(page, rowCountPerPage));
            }else if(orderByFName){
                tableModel.setList(App.getService().OrderByName(page, rowCountPerPage));
            }else if(orderByLName){
                tableModel.setList(App.getService().OrderByLastName(page, rowCountPerPage));
            }else {
                tableModel.setList(App.getService().OrderByDepartment(page, rowCountPerPage));
            }

            if(refresh){
                tableModel.setList(App.getService().find(id));
            }
        }

        jTableProduct.setModel(tableModel);


        service=App.getService();

        jLabelStatusHalaman.setText("Page " + page + " for " + totalPage);
        jLabelTotalData.setText(("Row count " + totalData));
        autoResizeColumn(jTableProduct);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduct = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonLast = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jComboBoxPage = new javax.swing.JComboBox<String>();
        jButtonPrevious = new javax.swing.JButton();
        jButtonFirst = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelStatusHalaman = new javax.swing.JLabel();
        jLabelTotalData = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jPanel3=new javax.swing.JPanel();
        JButton jButtonAdd = new JButton();
        JButton jButtonSearch = new JButton();
        JButton jButtonSort = new JButton();
        JButton jButtonRemove = new JButton();
        JButton jButtonRefresh = new JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableProduct.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jScrollPane1.setViewportView(jTableProduct);

        jButtonLast.setText("Last");
        jButtonLast.addActionListener(new  ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLastActionPerformed();
            }
        });
        jPanel1.add(jButtonLast);

        jButtonNext.setText("Next");
        jButtonNext.addActionListener(new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed();
            }
        });
        jPanel1.add(jButtonNext);
        jPanel1.add(jComboBoxPage);

        jButtonPrevious.setText("Previous");
        jButtonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousActionPerformed();
            }
        });
        jPanel1.add(jButtonPrevious);

        jButtonFirst.setText("First");
        jButtonFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFirstActionPerformed();
            }
        });
        jPanel1.add(jButtonFirst);


        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed();
            }
        });
        jPanel3.add(jButtonAdd);

        jButtonSearch.setText("Search by ID");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed();
            }
        });
        jPanel3.add(jButtonSearch);

        jButtonSort.setText("Sort");
        jButtonSort.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSortActionPerformed();
            }
        });
        jPanel3.add(jButtonSort);

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed();
            }
        });
        jPanel3.add(jButtonRemove);

        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed();
            }
        });
        jPanel3.add(jButtonRefresh);


        jLabelTotalData.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabelStatusHalaman, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                                .addComponent(jLabelTotalData, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelTotalData, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addComponent(jLabelStatusHalaman, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
        );



        jLabel1.setBackground(new java.awt.Color(240, 58, 239));
        jLabel1.setFont(new java.awt.Font("Gabriola", Font.BOLD, 60)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Students");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                         .addComponent(jScrollPane1)
                                         .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                 .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)//or size is 88
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(102)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        )

         );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNextActionPerformed() {//GEN-FIRST:event_jButtonNextActionPerformed
        if (page < totalPage) {
            page++;
            initPagination();;
        }
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonLastActionPerformed() {//GEN-FIRST:event_jButtonLastActionPerformed
        page = totalPage;
        initPagination();
    }//GEN-LAST:event_jButtonLastActionPerformed

    private void jButtonPreviousActionPerformed() {//GEN-FIRST:event_jButtonPreviousActionPerformed
        if (page > 1) {
            page--;
            initPagination();
        }
    }//GEN-LAST:event_jButtonPreviousActionPerformed

    private void jButtonFirstActionPerformed() {//GEN-FIRST:event_jButtonFirstActionPerformed
        page = 1;
        initPagination();
    }//GEN-LAST:event_jButtonFirstActionPerformed

    private void jButtonAddActionPerformed() {
        String input;
        long id = 0;
        String firstName = "";
        String lastName = "";
        String department="";
        boolean isRight=false;
        boolean cancel=false;
        int len;

        //validate ID
        input=JOptionPane.showInputDialog("Write the ID!");
        if(input==null) cancel=true;

        if(!cancel) {
            len = input.length();


            while (!isRight) {
                boolean onlyNumbers = false;
                boolean areSixSymbols = false;
                boolean stringFound = false;

                for (int i = 0; i < len; i++) {

                    if (stringFound) {
                        break;
                    }

                    char index = input.charAt(i);
                    switch (index) {
                        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' -> {

                        }
                        default ->
                            stringFound = true;

                    }
                }
                //Does the ID have characters
                if (!stringFound)
                    onlyNumbers = true;
                else {
                    JOptionPane.showMessageDialog(null, "You have characters in your ID!Use only numbers");
                    input = JOptionPane.showInputDialog("Write the ID!");
                    if(input==null) {
                        cancel=true;
                        break;
                    }
                    
                    try {
                        len = input.length();
                    } catch (NullPointerException ignored) {
                        len = 0;
                    }

                }//

                //THE ID needs to be 6 numbers
                if (len != 6 && !stringFound) {
                    JOptionPane.showMessageDialog(null, "You need to write 6 numbers!");
                    input = JOptionPane.showInputDialog("Write the ID!");
                    if(input==null) {
                        cancel=true;
                        break;
                    }
                    try {
                        len = input.length();
                    } catch (NullPointerException ignored) {
                        len = 0;
                    }


                } else if (len == 6) areSixSymbols = true;




                if (areSixSymbols && onlyNumbers) {
                    id = Long.parseLong(input);
                    //Does the ID already exist! It has to be a unique number
                    if(service.Exists(id)){
                        JOptionPane.showMessageDialog(null, "The ID already exists!");
                        input=JOptionPane.showInputDialog("Write the ID!");
                        if(input==null) {
                            cancel=true;
                            break;
                        }
                        try {
                            len = input.length();
                        } catch (NullPointerException ignored) {
                            len = 0;
                        }
                    }//

                    else
                        isRight = true;
                }
            }

            if(!cancel)
             id = Long.parseLong(input);
        }

        //validate First Name
        if(!cancel){
        firstName=JOptionPane.showInputDialog("Write the First Name!");
        if(firstName==null) cancel=true;
        }
        if( !cancel){
            while(firstName.isEmpty()){

                JOptionPane.showMessageDialog(null,"Write Something!");
                firstName=JOptionPane.showInputDialog("Write the First Name!");
                if(firstName==null) {
                    cancel=true;
                    break;
                }

            }
        }

        //validate Last Name
        if(!cancel){
        lastName=JOptionPane.showInputDialog("Write the Last Name!");
        if(lastName==null) cancel=true;
        }
        if(!cancel){
            while(lastName.isEmpty()){
                JOptionPane.showMessageDialog(null,"Write Something!");
                lastName=JOptionPane.showInputDialog("Write the Last Name!");
                if(lastName==null) {
                    cancel=true;
                    break;
                }
            }
        }

        //validate Department
        if(!cancel) {
            department = JOptionPane.showInputDialog("Write the student`s department!");
            if (department == null) cancel = true;
        }
        if(!cancel){
            while(department.isEmpty()){
                JOptionPane.showMessageDialog(null,"Write Something!");
                department=JOptionPane.showInputDialog("Write the student`s department!");
                if(department==null){
                    cancel=true;
                    break;
                }
            }
        }

        //validate Date like yyyy-mm-dd
//        if(!cancel) {
//            date = JOptionPane.showInputDialog("Write the date in this mode: yyyy-mm-dd !");
//            if (date == null) cancel = true;
//        }
//        if(!cancel){
//            String regex="(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})";
//            Pattern pattern= Pattern.compile(regex);
//            Matcher matcher=pattern.matcher(date);
//            boolean validDate=false;
//
//            while(!validDate){
//
//                if(matcher.find()){
//                    int month= Integer.parseInt(matcher.group("month"));
//                    int day= Integer.parseInt(matcher.group("day"));
//
//                    if(month>12 || day>31) {
//                        date=JOptionPane.showInputDialog("Write a realistic date (yyyy-mm-dd)!");
//                        regex="(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})";
//                        pattern= Pattern.compile(regex);
//                        matcher=pattern.matcher(date);
//                    }else
//                        validDate=true;
//                }else{
//                    JOptionPane.showMessageDialog(null,"Invalid Date!");
//                    date=JOptionPane.showInputDialog("Write the date like this: yyyy-mm-dd !");
//
//                    if(date==null){
//                        cancel=true;
//                        break;
//                    }
//
//                }
//            }
//        }


        if(!cancel) {
            Entity entity = new Entity();
            entity.setId(id);
            entity.setFirstName(firstName);
            entity.setLastName(lastName);
            entity.setDepartment(department);


            service.save(entity);
            tableModel.save(entity);
            initPagination();
            JOptionPane.showMessageDialog(null, "Successful!");
        }else{
            JOptionPane.showMessageDialog(null, "Canceled!");
        }
    }


    private void jButtonSearchActionPerformed() {
        long prevId;
        String input;

        tableModel.setList(App.getService().findAll(page, rowCountPerPage));
        input=JOptionPane.showInputDialog("Write the id of the row you want!Leave blank to refresh the list");
        if(input==null || input.isEmpty()){
            refresh=false;
            initPagination();
        }else{
          prevId=id;
          id=Integer.parseInt(input);


          if(service.Exists(id)){
             refresh=true;
            initPagination();
          }else{
            if(refresh)
                id=prevId;

              JOptionPane.showMessageDialog(null, "There is no row with this ID!");
              initPagination();
          }
        }
    }

    private void jButtonSortActionPerformed() {
        String input;

        input=JOptionPane.showInputDialog("Sort by ID=0 ; First Name=1 ; Last Name=2 ; Department=3;");
        if(input==null)
            input="default";
        switch (input){
            case "0":
                JOptionPane.showMessageDialog(null, "Data ordered by ID!Full list refreshed");
                orderById=true;
                orderByFName=false;
                orderByLName=false;
                orderByDepartment=false;
                refresh=false;
                break;
            case "1":
                JOptionPane.showMessageDialog(null, "Data ordered by First Name!Full list refreshed");
                orderById=false;
                orderByFName=true;
                orderByLName=false;
                orderByDepartment=false;
                refresh=false;
                break;
            case "2":
                JOptionPane.showMessageDialog(null, "Data ordered by Last Name!Full list refreshed");
                orderById=false;
                orderByFName=false;
                orderByLName=true;
                orderByDepartment=false;
                refresh=false;
                break;
            case "3":
                JOptionPane.showMessageDialog(null, "Data ordered by Department!Full list refreshed");
                orderById=false;
                orderByFName=false;
                orderByLName=false;
                orderByDepartment=true;
                refresh=false;
                break;
            default:
                break;
        }
        initPagination();

    }

    private void jButtonRemoveActionPerformed() {
        long id;
        String input;
        int total=(App.getService().count());
        int data=total;

        tableModel.setList(App.getService().findAll(page, rowCountPerPage));
        input=JOptionPane.showInputDialog("Write the ID of the row you want to remove!");
        if(input==null || input.isEmpty()) {
            input="1";
        }else{
            id=Integer.parseInt(input);
            if(tableModel.findById(id)){
                service.remove(id);
                initPagination();
                total=(App.getService().count());
                if(data-1==total)
                    JOptionPane.showMessageDialog(null, "Row deleted!");
            }else{
                JOptionPane.showMessageDialog(null, "No row has this ID!");

            }

        }

    }

    private void jButtonRefreshActionPerformed(){
        refresh=false;
        initPagination();
    }

    private void autoResizeColumn(JTable jTable1) {
        JTableHeader header = jTable1.getTableHeader();
        int rowCount = jTable1.getRowCount();

        final Enumeration<TableColumn> columns = jTable1.getColumnModel().getColumns();
        while (columns.hasMoreElements()) {
            TableColumn column =  columns.nextElement();
            int col = header.getColumnModel().getColumnIndex(column.getIdentifier());
            int width = (int) jTable1.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(jTable1, column.getIdentifier(), false, false, -1, col).getPreferredSize().getWidth();

            for (int row = 0; row < rowCount; row++) {
                int preferredWidth = (int) jTable1.getCellRenderer(row, col).getTableCellRendererComponent(jTable1,
                        jTable1.getValueAt(row, col), false, false, row, col).getPreferredSize().getWidth();
                width = Math.max(width, preferredWidth);
            }
            header.setResizingColumn(column); // this line is very important
            column.setWidth(width + jTable1.getIntercellSpacing().width);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFirst;
    private javax.swing.JButton jButtonLast;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrevious;
    private javax.swing.JComboBox <String>jComboBoxPage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelStatusHalaman;
    private javax.swing.JLabel jLabelTotalData;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProduct;

    private  javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}